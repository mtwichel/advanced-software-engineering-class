model MovieRental

enum PriceCode {regular, family, newRelease}

class Customer
  attributes
    name:String
    numRen:Integer

  operations
    addRental()
      begin
      end

    getName()

    getTotalCharge():Real
      begin
        declare ans:Real;

        ans:=0.0;

        for rental in self.rentals do
          declare newCharge:Real;
          newCharge:=rental.getCharge();
          ans := ans + newCharge;
        end;

        result := ans;
      end

    Statement()
      begin
        declare aCharge:Charge, sm:Movie, ch:Real, t:String;

        self.numRen:=self.rentals->size();
        for ren in self.rentals do
          ch:=ren.getCharge();
          sm:=ren.getMovie();
          t:=sm.getTitle();
          aCharge:= new Charge;
          aCharge.chVal:=ch;
          aCharge.chT:=t;
          insert(self, aCharge) into customerCharges;
        end
      end
end

class Rental
  attributes
    daysRented:Integer

  operations
    getDaysRented():Integer
      begin
        result:=self.daysRented;
      end

    getMovie():Movie
      begin
        result:=self.movie;
      end

    getCharge():Real
      begin
        declare wrkCh:Real, pc:PriceCode;

        pc:=self.movie.getPriceCode();

        wrkCh:=0;

        if pc=PriceCode::regular then
          wrkCh:=2.0;
          if self.daysRented > 2 then
            wrkCh:=wrkCh + (self.daysRented - 1) * 1.5;
          end;
        end;

        if pc=PriceCode::family then
          wrkCh:=1.5;
          if self.daysRented > 3 then
            wrkCh:=wrkCh + (self.daysRented - 3) * 1.5;
          end;
        end;

        if pc=PriceCode::newRelease then
          wrkCh:=self.daysRented * 3.0;
        end;

        result := wrkCh;
      end
end

class Movie
  attributes
    title:String
    priceCode:PriceCode

  operations
    getPriceCode():PriceCode
      begin
        result:=self.priceCode;
      end

    setPriceCode(code:PriceCode)
      begin
        self.priceCode:=code;
      end

    getTitle():String
      begin
        result:=self.title;
      end
end

class Charge
  attributes
    chVal:Real
    chT:String
  operations
end

--associations

association custRentals between
  Customer[1] role renter
  Rental[0..*] role rentals
end

association movRental between
  Rental[0..*] role movRentals
  Movie[1] role movie
end

association customerCharges between
  Customer [1] role cust
  Charge[0..*] role charges
end


--constraints
constraints
  context Customer
    inv maxRental:numRen <= 10
    inv agreement:rentals->size = numRen
    inv daysRented:rentals->select(daysRented>3)->notEmpty

--our invariants
  context Customer
    inv rentals:rentals->notEmpty
