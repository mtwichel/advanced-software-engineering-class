/* Model created by Brady Cornett and Marcus Twichel
 * Advanced Software Engineering
 * Homework 3
 * 02/24/2020
 */
model ourFPS

  enum Level {recruit, basic, master, grandmaster, godtier}
  enum WeaponType {range, melee, magic}
  enum PlayerState {neutral, panic, attack}

  abstract class Entity
    attributes
      health: Integer
      name: String
      speed: Integer
      level: Level
      xPosition: Integer
      yPosition: Integer
      state: PlayerState init = PlayerState::neutral
    operations
      attack(target:Entity)
        begin
          target.recieveDamage(self.weapon.damage);
        end
      move(dx: Integer, dy: Integer)
        begin
          self.xPosition := self.xPosition + dx;
          self.yPosition := self.yPosition + dy;
        end
      seePlayer(entity:Entity)
        begin
          insert (self, entity) into enemiesAssociation;
        end
      loosePlayer(entity:Entity)
        begin
          delete (self, entity) from enemiesAssociation;
        end
      recieveDamage(damage: Integer)
        begin
          self.health := self.health - damage;
        end
    statemachines
      psm PlayerState
        states
          startup:initial
          neutral [state = PlayerState::neutral]
          attack [state = PlayerState::attack]
          panic [state = PlayerState::panic]
          death [health <= 0]
          -- find final state
        transitions
          startup -> neutral { create }
          -- if our weapon is better than opponent's, we attack
          neutral -> attack { seePlayer() [self.enemies1.weapon.damage->sum() < self.weapon.damage] }
          neutral -> panic { seePlayer() [self.enemies1.weapon.damage->sum() >= self.weapon.damage] }
          attack -> neutral { loosePlayer() [self.enemies1->size() = 0] }
          panic -> neutral { loosePlayer() [self.enemies1->size() = 0] }
          attack -> death { recieveDamage() [health <= 0] }
          panic -> death { recieveDamage() [health <= 0] }
        end

  end

  class Player < Entity
    attributes
    operations
  end


  class NonPlayableCharacter < Entity
    attributes
    operations
  end

  class Weapon
    attributes
      name: String
      damage: Integer
      type: WeaponType
  end

-- associations
association enemiesAssociation between
  Entity[0..*] role enemies1
  Entity[0..*] role enemies2
end

association entityWeapon between
  Entity[1] role entity
  Weapon[1] role weapon
end